const { readFileSync } = require("fs")
const { resolve } = require("path")

const makeMap = (scans, sand) => {
    const parsedScans = scans.map((scan) =>
        scan
            .split(" -> ")
            .map((coordinates) => coordinates.split(","))
            .map(([col, row]) => ({ col: Number(col), row: Number(row) }))
    )
    const flatParsedScans = parsedScans.flat()

    const rowCoordinates = flatParsedScans.map(({ row }) => row)
    const firstRowIndex = 0
    const lastRowIndex = Math.max(...rowCoordinates)

    const colCoordinates = flatParsedScans.map(({ col }) => col)
    const firstColIndex = Math.min(...colCoordinates)
    const lastColIndex = Math.max(...colCoordinates)

    const emptyMap = Array(lastRowIndex - firstRowIndex + 1)
        .fill(null)
        .map(() => Array(lastColIndex - firstColIndex + 1).fill("."))

    const offsetCol = (col) => col - firstColIndex

    const offsetScans = parsedScans.map((scan) =>
        scan.map(({ col, row }) => ({ col: offsetCol(col), row }))
    )

    const isBetween = (n, [n1, n2]) => (n1 <= n && n <= n2) || (n2 <= n && n <= n1)

    const isBetweenCoordinates = ([r, c], [start, end]) =>
        isBetween(r, [start.row, end.row]) && isBetween(c, [start.col, end.col])

    const isRock = ([r, c]) =>
        offsetScans.some((scan) =>
            scan.some(
                ({ col, row }, i) =>
                    i > 0 && isBetweenCoordinates([r, c], [{ col, row }, scan[i - 1]])
            )
        )

    const isSand = ([r, c]) => {
        const [sandCol, sandRow] = sand.split(",").map(Number)

        return r === sandRow && c === offsetCol(sandCol)
    }

    return emptyMap.map((row, r) =>
        row.map((col, c) => (isRock([r, c]) ? "#" : isSand([r, c]) ? "+" : col))
    )
}

const makeFlooredMap = (scans, sand) => {
    const map = makeMap(scans, sand)
    const colCount = map[0].length

    return [...map, Array(colCount).fill("."), Array(colCount).fill("#")]
}

const makeBufferedMap = (map) => {
    return map.map((row, i) => {
        const isLastRow = i === map.length - 1

        return [
            isLastRow ? "#" : ".",
            isLastRow ? "#" : ".",
            ...row,
            isLastRow ? "#" : ".",
            isLastRow ? "#" : ".",
        ]
    })
}

const letSandFall = (map) => {
    const entryRow = map.findIndex((row) => row.includes("+"))
    const entryCol = map[entryRow].findIndex((cell) => cell.includes("+"))

    const canFall = ({ col, row }) => {
        return (
            map[row + 1][col] === "." ||
            (map[sandCoordinates.row + 1][sandCoordinates.col] !== "." &&
                map[sandCoordinates.row + 1][sandCoordinates.col - 1] === ".") ||
            (map[sandCoordinates.row + 1][sandCoordinates.col] !== "." &&
                map[sandCoordinates.row + 1][sandCoordinates.col + 1] === ".")
        )
    }

    let sandCoordinates = { col: entryCol, row: entryRow }

    while (canFall(sandCoordinates)) {
        if (map[sandCoordinates.row + 1][sandCoordinates.col] === ".") {
            sandCoordinates = {
                ...sandCoordinates,
                row: sandCoordinates.row + 1,
            }
        } else {
            if (
                map[sandCoordinates.row + 1][sandCoordinates.col] !== "." &&
                map[sandCoordinates.row + 1][sandCoordinates.col - 1] === "."
            ) {
                sandCoordinates = {
                    ...sandCoordinates,
                    row: sandCoordinates.row + 1,
                    col: sandCoordinates.col - 1,
                }
            } else if (
                map[sandCoordinates.row + 1][sandCoordinates.col] !== "." &&
                map[sandCoordinates.row + 1][sandCoordinates.col + 1] === "."
            ) {
                sandCoordinates = {
                    ...sandCoordinates,
                    row: sandCoordinates.row + 1,
                    col: sandCoordinates.col + 1,
                }
            }
        }

        if (
            !map[sandCoordinates.row + 1] ||
            !map[sandCoordinates.row + 1][sandCoordinates.col - 1] ||
            !map[sandCoordinates.row + 1][sandCoordinates.col + 1]
        ) {
            return map
        }
    }

    return map.map((row, r) =>
        row.map((cell, c) => (r === sandCoordinates.row && c === sandCoordinates.col ? "▫️" : cell))
    )
}

const letSandFallToFloor = (map) => {
    const entryRow = map.findIndex((row) => row.includes("+"))

    const entryCol = map[entryRow].findIndex((cell) => cell.includes("+"))

    const canFall = ({ col, row }) => {
        return (
            map[row + 1][col] === "." ||
            (map[sandCoordinates.row + 1][sandCoordinates.col] !== "." &&
                map[sandCoordinates.row + 1][sandCoordinates.col - 1] === ".") ||
            (map[sandCoordinates.row + 1][sandCoordinates.col] !== "." &&
                map[sandCoordinates.row + 1][sandCoordinates.col + 1] === ".")
        )
    }

    let sandCoordinates = { col: entryCol, row: entryRow }

    while (canFall(sandCoordinates)) {
        if (map[sandCoordinates.row + 1][sandCoordinates.col] === ".") {
            sandCoordinates = {
                ...sandCoordinates,
                row: sandCoordinates.row + 1,
            }
        } else {
            if (
                map[sandCoordinates.row + 1][sandCoordinates.col] !== "." &&
                map[sandCoordinates.row + 1][sandCoordinates.col - 1] === "."
            ) {
                sandCoordinates = {
                    ...sandCoordinates,
                    row: sandCoordinates.row + 1,
                    col: sandCoordinates.col - 1,
                }
            } else if (
                map[sandCoordinates.row + 1][sandCoordinates.col] !== "." &&
                map[sandCoordinates.row + 1][sandCoordinates.col + 1] === "."
            ) {
                sandCoordinates = {
                    ...sandCoordinates,
                    row: sandCoordinates.row + 1,
                    col: sandCoordinates.col + 1,
                }
            }
        }

        if (!map[sandCoordinates.row + 1]) {
            throw "issue"
        }

        if (
            !map[sandCoordinates.row + 1][sandCoordinates.col - 1] ||
            !map[sandCoordinates.row + 1][sandCoordinates.col + 1]
        ) {
            map = makeBufferedMap(map)
            sandCoordinates = {
                ...sandCoordinates,
                col: sandCoordinates.col + 2,
            }
        }
    }

    return map.map((row, r) =>
        row.map((cell, c) => (r === sandCoordinates.row && c === sandCoordinates.col ? "▫️" : cell))
    )
}

const dropSand = (number, map) => {
    let i = 0
    let currentMap = map

    while (i < number) {
        const newMap = letSandFall(currentMap)

        if (JSON.stringify(newMap) === JSON.stringify(currentMap)) {
            return currentMap
        }

        currentMap = newMap
        i++
    }

    return currentMap
}

const dropFlooredSand = (number, map) => {
    let i = 0
    let currentMap = map

    while (i < number) {
        const newMap = letSandFallToFloor(currentMap)

        if (newMap.findIndex((row) => row.includes("+")) === -1) {
            return newMap
        }

        if (JSON.stringify(newMap) === JSON.stringify(currentMap)) {
            return currentMap
        }

        currentMap = newMap
        i++
    }

    return currentMap
}

const countSandParticles = (map) =>
    dropSand(Infinity, map)
        .flat()
        .filter((cell) => cell === "▫️").length

const countFlooredSandParticles = (map) => {
    return dropFlooredSand(Infinity, map)
        .flat()
        .filter((cell) => cell === "▫️").length
}

const INPUT = String(readFileSync(resolve(__dirname, "14.input.txt"))).split("\n")

;(async () => {
    let i = 0
    let map = makeMap(INPUT, "500,0")
    while (i < 638) {
        map = dropSand(1, map)

        console.clear()
        console.warn("\n" + map.map((r) => r.join("")).join("\n"))

        await new Promise((resolve) => {
            setTimeout(() => {
                resolve()
            }, 100)
        })

        i++
    }
})()

// return

// describe("makeMap", () => {
//     it("should return a map of the cave", () => {
//         expect(
//             makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
//             [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])
//     })
// })

// describe("makeFlooredMap", () => {
//     it("should return a floored map of the cave", () => {
//         expect(
//             makeFlooredMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
//             [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
//         ])
//     })
// })

// describe("makeBufferedMap", () => {
//     it("should return a buffered map of the cave", () => {
//         expect(
//             makeBufferedMap(
//                 makeFlooredMap(
//                     ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                     "500,0"
//                 )
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", ".", ".", "+", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#", "#", ".", "."],
//             [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#", ".", ".", "."],
//             [".", ".", ".", ".", "#", "#", "#", ".", ".", ".", "#", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
//             [".", ".", "#", "#", "#", "#", "#", "#", "#", "#", "#", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
//         ])
//     })
// })

// describe("letSandFall", () => {
//     it("should return the map after the sand has fallen", () => {
//         expect(
//             letSandFall(
//                 makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
//             [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])

//         expect(
//             letSandFall(
//                 letSandFall(
//                     makeMap(
//                         ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                         "500,0"
//                     )
//                 )
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
//             [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", "▫️", "▫️", ".", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])

//         expect(
//             letSandFall(
//                 letSandFall(
//                     letSandFall(
//                         makeMap(
//                             ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                             "500,0"
//                         )
//                     )
//                 )
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
//             [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])

//         expect(
//             letSandFall(
//                 letSandFall(
//                     letSandFall(
//                         letSandFall(
//                             makeMap(
//                                 ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                                 "500,0"
//                             )
//                         )
//                     )
//                 )
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
//             [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", "#", "."],
//             [".", ".", ".", ".", ".", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])

//         expect(
//             letSandFall(
//                 letSandFall(
//                     letSandFall(
//                         letSandFall(
//                             letSandFall(
//                                 makeMap(
//                                     ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                                     "500,0"
//                                 )
//                             )
//                         )
//                     )
//                 )
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
//             [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", "#", "."],
//             [".", ".", ".", ".", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])
//     })
// })

// describe("dropSand", () => {
//     it("should return the map after dropping sand a number of times", () => {
//         expect(
//             dropSand(
//                 5,
//                 makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
//             [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
//             [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", "#", "."],
//             [".", ".", ".", ".", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])

//         expect(
//             dropSand(
//                 22,
//                 makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", ".", "."],
//             [".", ".", ".", ".", ".", "▫️", "▫️", "▫️", ".", "."],
//             [".", ".", ".", ".", "#", "▫️", "▫️", "▫️", "#", "#"],
//             [".", ".", ".", ".", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", "#", "#", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", ".", ".", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", ".", "▫️", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])

//         expect(
//             dropSand(
//                 24,
//                 makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", ".", "."],
//             [".", ".", ".", ".", ".", "▫️", "▫️", "▫️", ".", "."],
//             [".", ".", ".", ".", "#", "▫️", "▫️", "▫️", "#", "#"],
//             [".", ".", ".", "▫️", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", "#", "#", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", ".", ".", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             [".", "▫️", ".", "▫️", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])

//         expect(
//             dropSand(
//                 25,
//                 makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", ".", "."],
//             [".", ".", ".", ".", ".", "▫️", "▫️", "▫️", ".", "."],
//             [".", ".", ".", ".", "#", "▫️", "▫️", "▫️", "#", "#"],
//             [".", ".", ".", "▫️", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", "#", "#", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", ".", ".", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             [".", "▫️", ".", "▫️", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])

//         expect(
//             dropSand(
//                 Infinity,
//                 makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", ".", "."],
//             [".", ".", ".", ".", ".", "▫️", "▫️", "▫️", ".", "."],
//             [".", ".", ".", ".", "#", "▫️", "▫️", "▫️", "#", "#"],
//             [".", ".", ".", "▫️", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", "#", "#", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", ".", ".", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             [".", "▫️", ".", "▫️", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//         ])
//     })
// })

// describe("dropFlooredSand", () => {
//     it("should return the map after dropping sand a number of times", () => {
//         expect(
//             dropFlooredSand(
//                 24,
//                 makeFlooredMap(
//                     ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                     "500,0"
//                 )
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", ".", ".", "."],
//             [".", ".", ".", ".", ".", "▫️", "▫️", "▫️", ".", "."],
//             [".", ".", ".", ".", "#", "▫️", "▫️", "▫️", "#", "#"],
//             [".", ".", ".", "▫️", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", "#", "#", "#", "▫️", "▫️", "▫️", "#", "."],
//             [".", ".", ".", ".", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             [".", "▫️", ".", "▫️", "▫️", "▫️", "▫️", "▫️", "#", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
//         ])

//         expect(
//             dropFlooredSand(
//                 25,
//                 makeFlooredMap(
//                     ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                     "500,0"
//                 )
//             )
//         ).toEqual([
//             [".", ".", ".", ".", ".", ".", ".", ".", "+", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", ".", "▫️", ".", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", ".", "▫️", "▫️", "▫️", ".", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", "#", "▫️", "▫️", "▫️", "#", "#", ".", "."],
//             [".", ".", ".", ".", ".", "▫️", "#", "▫️", "▫️", "▫️", "#", ".", ".", "."],
//             [".", ".", ".", ".", "#", "#", "#", "▫️", "▫️", "▫️", "#", ".", ".", "."],
//             [".", ".", ".", ".", ".", ".", "▫️", "▫️", "▫️", "▫️", "#", ".", ".", "."],
//             [".", ".", ".", "▫️", ".", "▫️", "▫️", "▫️", "▫️", "▫️", "#", ".", ".", "."],
//             [".", ".", "#", "#", "#", "#", "#", "#", "#", "#", "#", ".", ".", "."],
//             [".", "▫️", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
//             ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
//         ])

//         expect(
//             dropFlooredSand(
//                 26,
//                 makeFlooredMap(
//                     ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                     "500,0"
//                 )
//             )
//         ).toEqual([
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "+",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "▫️",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "#",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 "#",
//                 "#",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "▫️",
//                 "#",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 "#",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "#",
//                 "#",
//                 "#",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 "#",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 "#",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "▫️",
//                 ".",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 "▫️",
//                 "#",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 ".",
//                 ".",
//                 "▫️",
//                 "▫️",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//                 ".",
//             ],
//             [
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//                 "#",
//             ],
//         ])
//     })
// })

// describe("countSandParticles", () => {
//     it("should return the sand particle count", () => {
//         expect(
//             countSandParticles(
//                 makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
//             )
//         ).toEqual(24)

//         expect(countSandParticles(makeMap(INPUT, "500,0"))).toEqual(638)
//     })
// })

// describe("countFlooredSandParticles", () => {
//     it.skip("should return the floored sand particle count", () => {
//         expect(
//             countFlooredSandParticles(
//                 makeFlooredMap(
//                     ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
//                     "500,0"
//                 )
//             )
//         ).toEqual(93)

//         expect(countFlooredSandParticles(makeFlooredMap(INPUT, "500,0"))).toEqual(31722)
//     })
// })
