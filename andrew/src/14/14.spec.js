import {
    makeMap,
    makeFlooredMap,
    makeBufferedMap,
    letSandFall,
    dropFlooredSand,
    dropSand,
    countSandParticles,
    countFlooredSandParticles,
} from "@/14/14"
import { readFileSync } from "fs"
import { resolve } from "path"

const INPUT = String(readFileSync(resolve(__dirname, "14.input.txt"))).split("\n")

describe("makeMap", () => {
    it("should return a map of the cave", () => {
        expect(
            makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
            [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])
    })
})

describe("makeFlooredMap", () => {
    it("should return a floored map of the cave", () => {
        expect(
            makeFlooredMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
            [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ])
    })
})

describe("makeBufferedMap", () => {
    it("should return a buffered map of the cave", () => {
        expect(
            makeBufferedMap(
                makeFlooredMap(
                    ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                    "500,0"
                )
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", ".", ".", "+", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#", "#", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "#", ".", ".", "."],
            [".", ".", ".", ".", "#", "#", "#", ".", ".", ".", "#", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."],
            [".", ".", "#", "#", "#", "#", "#", "#", "#", "#", "#", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ])
    })
})

describe("letSandFall", () => {
    it("should return the map after the sand has fallen", () => {
        expect(
            letSandFall(
                makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
            [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])

        expect(
            letSandFall(
                letSandFall(
                    makeMap(
                        ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                        "500,0"
                    )
                )
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
            [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", "o", "o", ".", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])

        expect(
            letSandFall(
                letSandFall(
                    letSandFall(
                        makeMap(
                            ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                            "500,0"
                        )
                    )
                )
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
            [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])

        expect(
            letSandFall(
                letSandFall(
                    letSandFall(
                        letSandFall(
                            makeMap(
                                ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                                "500,0"
                            )
                        )
                    )
                )
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
            [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", "#", "."],
            [".", ".", ".", ".", ".", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])

        expect(
            letSandFall(
                letSandFall(
                    letSandFall(
                        letSandFall(
                            letSandFall(
                                makeMap(
                                    ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                                    "500,0"
                                )
                            )
                        )
                    )
                )
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
            [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", "#", "."],
            [".", ".", ".", ".", "o", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])
    })
})

describe("dropSand", () => {
    it("should return the map after dropping sand a number of times", () => {
        expect(
            dropSand(
                5,
                makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "#"],
            [".", ".", ".", ".", "#", ".", ".", ".", "#", "."],
            [".", ".", "#", "#", "#", ".", ".", ".", "#", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", "#", "."],
            [".", ".", ".", ".", "o", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])

        expect(
            dropSand(
                22,
                makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", ".", "."],
            [".", ".", ".", ".", ".", "o", "o", "o", ".", "."],
            [".", ".", ".", ".", "#", "o", "o", "o", "#", "#"],
            [".", ".", ".", ".", "#", "o", "o", "o", "#", "."],
            [".", ".", "#", "#", "#", "o", "o", "o", "#", "."],
            [".", ".", ".", ".", "o", "o", "o", "o", "#", "."],
            [".", ".", ".", "o", "o", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])

        expect(
            dropSand(
                24,
                makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", ".", "."],
            [".", ".", ".", ".", ".", "o", "o", "o", ".", "."],
            [".", ".", ".", ".", "#", "o", "o", "o", "#", "#"],
            [".", ".", ".", "o", "#", "o", "o", "o", "#", "."],
            [".", ".", "#", "#", "#", "o", "o", "o", "#", "."],
            [".", ".", ".", ".", "o", "o", "o", "o", "#", "."],
            [".", "o", ".", "o", "o", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])

        expect(
            dropSand(
                25,
                makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", ".", "."],
            [".", ".", ".", ".", ".", "o", "o", "o", ".", "."],
            [".", ".", ".", ".", "#", "o", "o", "o", "#", "#"],
            [".", ".", ".", "o", "#", "o", "o", "o", "#", "."],
            [".", ".", "#", "#", "#", "o", "o", "o", "#", "."],
            [".", ".", ".", ".", "o", "o", "o", "o", "#", "."],
            [".", "o", ".", "o", "o", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])

        expect(
            dropSand(
                Infinity,
                makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", ".", "."],
            [".", ".", ".", ".", ".", "o", "o", "o", ".", "."],
            [".", ".", ".", ".", "#", "o", "o", "o", "#", "#"],
            [".", ".", ".", "o", "#", "o", "o", "o", "#", "."],
            [".", ".", "#", "#", "#", "o", "o", "o", "#", "."],
            [".", ".", ".", ".", "o", "o", "o", "o", "#", "."],
            [".", "o", ".", "o", "o", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
        ])
    })
})

describe("dropFlooredSand", () => {
    it("should return the map after dropping sand a number of times", () => {
        expect(
            dropFlooredSand(
                24,
                makeFlooredMap(
                    ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                    "500,0"
                )
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", "+", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "o", ".", ".", "."],
            [".", ".", ".", ".", ".", "o", "o", "o", ".", "."],
            [".", ".", ".", ".", "#", "o", "o", "o", "#", "#"],
            [".", ".", ".", "o", "#", "o", "o", "o", "#", "."],
            [".", ".", "#", "#", "#", "o", "o", "o", "#", "."],
            [".", ".", ".", ".", "o", "o", "o", "o", "#", "."],
            [".", "o", ".", "o", "o", "o", "o", "o", "#", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ])

        expect(
            dropFlooredSand(
                25,
                makeFlooredMap(
                    ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                    "500,0"
                )
            )
        ).toEqual([
            [".", ".", ".", ".", ".", ".", ".", ".", "+", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", ".", "o", ".", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", ".", "o", "o", "o", ".", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "#", "o", "o", "o", "#", "#", ".", "."],
            [".", ".", ".", ".", ".", "o", "#", "o", "o", "o", "#", ".", ".", "."],
            [".", ".", ".", ".", "#", "#", "#", "o", "o", "o", "#", ".", ".", "."],
            [".", ".", ".", ".", ".", ".", "o", "o", "o", "o", "#", ".", ".", "."],
            [".", ".", ".", "o", ".", "o", "o", "o", "o", "o", "#", ".", ".", "."],
            [".", ".", "#", "#", "#", "#", "#", "#", "#", "#", "#", ".", ".", "."],
            [".", "o", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
            ["#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"],
        ])

        expect(
            dropFlooredSand(
                26,
                makeFlooredMap(
                    ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                    "500,0"
                )
            )
        ).toEqual([
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                "+",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                "o",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                "o",
                "o",
                "o",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                "#",
                "o",
                "o",
                "o",
                "#",
                "#",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                "o",
                "#",
                "o",
                "o",
                "o",
                "#",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                "#",
                "#",
                "#",
                "o",
                "o",
                "o",
                "#",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                "o",
                "o",
                "o",
                "o",
                "#",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                ".",
                "o",
                ".",
                "o",
                "o",
                "o",
                "o",
                "o",
                "#",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                ".",
                ".",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                ".",
                ".",
                "o",
                "o",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
                ".",
            ],
            [
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
                "#",
            ],
        ])
    })
})

describe("countSandParticles", () => {
    it("should return the sand particle count", () => {
        expect(
            countSandParticles(
                makeMap(["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"], "500,0")
            )
        ).toEqual(24)

        expect(countSandParticles(makeMap(INPUT, "500,0"))).toEqual(638)
    })
})

describe("countFlooredSandParticles", () => {
    it.skip("should return the floored sand particle count", () => {
        expect(
            countFlooredSandParticles(
                makeFlooredMap(
                    ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"],
                    "500,0"
                )
            )
        ).toEqual(93)

        expect(countFlooredSandParticles(makeFlooredMap(INPUT, "500,0"))).toEqual(31722)
    })
})
